#反向代理
#user  nobody;
# 启动进程,通常设置成和cpu的数量相等
worker_processes  1;

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;
pid        logs/nginx.pid;

#工作模式及连接数上限
events {
	#单个后台worker process进程的最大并发链接数
    worker_connections  1024;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
	#设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
	
	#设定日志格式
    access_log  logs/access.log;

    #指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
	
	#将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞
    tcp_nopush     on;
	
	#连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
	
	#开启gzip压缩
    gzip  on;
	#IE1-6禁用gzip压缩
	gzip_disable "MSIE [1-6]\.(?!.*SV1)";
	
	#设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大
	gzip_min_length 1k;
	
	#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k 代表以 16k 为单位，按照原始数据大小以 16k 为单位的4倍申请内存。
    gzip_buffers   4 16k;
	
    #gzip_http_version 1.0;
	
	#gzip压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理最慢（传输快但比较消耗cpu）。这里设置为 5。
    #gzip_comp_level 2;
	
	#匹配MIME类型进行压缩，（无论是否指定）"text/html" 类型总是会被压缩的。这里设置为 application/x-javascript text/css application/xml。
    #gzip_types    text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
	
	#设定请求缓冲
	client_header_buffer_size    1k;
	large_client_header_buffers  4 4k;
	
	
	#include /etc/nginx/conf.d/*.conf;
	#include /etc/nginx/sites-enabled/*;
	
	#设定负载均衡的服务器列表
    server {
		#侦听80端口
        listen       80;
		#定义使用www.xx.com/localhost访问
        server_name  localhost;

		#设定本虚拟主机的访问日志
        access_log  logs/host.access.log;

        location / {
            proxy_pass   http://127.0.0.1:9009;
        }
        #定义错误提示页面
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
