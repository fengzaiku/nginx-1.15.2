
#user  nobody;
# 启动进程,通常设置成和cpu的数量相等
worker_processes  1;

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        logs/nginx.pid;

#工作模式及连接数上限
events {
	#epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
	#use epoll; 
	#单个后台worker process进程的最大并发链接数
    worker_connections  1024;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
	#设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
	
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
	
	#设定日志格式
    access_log  logs/access.log  main;

    #指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
	
	#将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞
    tcp_nopush     on;
	
	#连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
	
	#开启gzip压缩
    gzip  on;
	#IE1-6禁用gzip压缩
	gzip_disable "MSIE [1-6]\.(?!.*SV1)";
	
	
	#设定请求缓冲
	client_header_buffer_size    1k;
	large_client_header_buffers  4 4k;
	
	
	#include /etc/nginx/conf.d/*.conf;
	#include /etc/nginx/sites-enabled/*;
	
	#设定负载均衡的服务器列表
	upstream mysvr {
        #weigth参数表示权值，权值越高被分配到的几率越大
        server 127.0.0.1:9009 weight=1;
		
        #server 127.0.0.1:9009 weight=5;
        #server 192.168.8.2:80  weight=1;
        #server 192.168.8.3:80  weight=6;
    }
    server {
		#侦听80端口
        listen       80;
		#定义使用www.xx.com/localhost访问
        server_name  localhost;

        #charset koi8-r;
		#设定本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        location / {
			#定义服务器的默认网站根目录位置
            root   html;
			#定义首页索引文件的名称
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #定义错误提示页面
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

		
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

	server {
        #侦听express-server.com的80端口
        listen       80;
        server_name  express-server.com;

        #对aspx后缀的进行负载均衡请求
        location / {
			#定义服务器的默认网站根目录位置
            root   /root;
			#定义首页索引文件的名称
            index index.php index.html index.htm;

            proxy_pass  http://mysvr;#请求转向mysvr 定义的服务器列表

            #以下是一些反向代理的配置可删除.
            proxy_redirect off;

            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#允许客户端请求的最大单文件字节数
            client_max_body_size 10m;    
			#缓冲区代理缓冲用户端请求的最大字节数
            client_body_buffer_size 128k;  
			#nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_connect_timeout 90;  
			#后端服务器数据回传时间(代理发送超时)
            proxy_send_timeout 90;      
			#连接成功后，后端服务器响应时间(代理接收超时)			
            proxy_read_timeout 90;    
			#设置代理服务器（nginx）保存用户头信息的缓冲区大小			
            proxy_buffer_size 4k;     
			#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            proxy_buffers 4 32k;         
			#高负荷下缓冲大小（proxy_buffers*2）
            proxy_busy_buffers_size 64k;    
			#设定缓存文件夹大小，大于这个值，将从upstream服务器传
            proxy_temp_file_write_size 64k; 
        }
    }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
